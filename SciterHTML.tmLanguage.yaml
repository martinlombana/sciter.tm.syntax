scopeName: source.sciter.html
uuid: 3a93c693-d33e-43af-bf38-9ed8a1a6b8ef
fileTypes:
    - html
    - htm
firstLineMatch: '<(?i:(!DOCTYPE\s*)?html)'
name: 'Sciter HTML'
patterns:
    -
        begin: '(<)([a-zA-Z0-9:]++)(?=[^>]*></\2>)'
        beginCaptures:
            '1': { name: punctuation.definition.tag.html }
            '2': { name: entity.name.tag.html }
        end: (>(<)/)(\2)(>)
        endCaptures:
            '1': { name: punctuation.definition.tag.html }
            '2': { name: meta.scope.between-tag-pair.html }
            '3': { name: entity.name.tag.html }
            '4': { name: punctuation.definition.tag.html }
        name: meta.tag.any.html
        patterns:
            -
                include: '#tag-stuff'
    -
        begin: '<!--'
        captures:
            '0': { name: punctuation.definition.comment.html }
        end: '--\s*>'
        name: comment.block.html
        patterns:
            -
                match: '--'
                name: invalid.illegal.bad-comments-or-CDATA.html
    -
        begin: '<!'
        captures:
            '0': { name: punctuation.definition.tag.html }
        end: '>'
        name: meta.tag.sgml.html
        patterns:
            -
                begin: '(?i:DOCTYPE)'
                captures:
                    '1': {name: entity.name.tag.doctype.html}
                end: '(?=>)'
                name: meta.tag.sgml.doctype.html
                patterns:
                    - {match: '"[^">]*"', name: string.quoted.double.doctype.identifiers-and-DTDs.html}
            -
                begin: '\[CDATA\['
                end: ']](?=>)'
                name: constant.other.inline-data.html
            -
                match: '(\s*)(?!--|>)\S(\s*)'
                name: invalid.illegal.bad-comments-or-CDATA.html
    -
        begin: '(?:^\s+)?(<)((?i:style))\b(?![^>]*/>)'
        captures:
            '1': { name: punctuation.definition.tag.html }
            '2': { name: entity.name.tag.style.html }
            '3': { name: punctuation.definition.tag.html }
        end: '(</)((?i:style))(>)(?:\s*\n)?'
        name: source.sciter.css.embedded.html
        patterns:
            -
                include: '#tag-stuff'
            -
                begin: (>)
                beginCaptures:
                    '1': {name: punctuation.definition.tag.html}
                end: '(?=</(?i:style))'
                patterns:
                    - {include: source.sciter.css}
    -
        begin: '(?:^\s+)?(<)((?i:script))\b(?![^>]*/>)(?![^>]*(?i:type.?=.?text/((?!tiscript).*)))'
        beginCaptures:
            '1': { name: punctuation.definition.tag.html }
            '2': { name: entity.name.tag.script.html }
        end: '(?<=</(script|SCRIPT))(>)(?:\s*\n)?'
        endCaptures:
            '2': { name: punctuation.definition.tag.html }
        name: source.sciter.tis.embedded.html
        patterns:
            -   include: '#tag-stuff'
            -   begin: '(?<!</(?:script|SCRIPT))(>)'
                captures:
                    '1': {name: punctuation.definition.tag.html}
                    '2': {name: entity.name.tag.script.html}
                end: '(</)((?i:script))'
                patterns:
                    - {include: source.sciter.tis}
    -
        begin: '(</?)([a-zA-Z0-9:]+)'
        beginCaptures:
            '1': { name: punctuation.definition.tag.begin.html }
            '2': { name: entity.name.tag.html }
        end: (>)
        endCaptures:
            '1': { name: punctuation.definition.tag.end.html }
        name: meta.tag.other.html
        patterns:
            -
                include: '#tag-stuff'
    -
        include: '#entities'
    -
        match: '<>'
        name: invalid.illegal.incomplete.html
repository:
    entities:
        patterns:
            -
                captures:
                    '1': {name: punctuation.definition.entity.html}
                    '3': {name: punctuation.definition.entity.html}
                match: '(&)([a-zA-Z0-9]+|#[0-9]+|#[xX][0-9a-fA-F]+)(;)'
                name: constant.character.entity.html
            -
                match: '&'
                name: invalid.illegal.bad-ampersand.html
    python:
        begin: '(?:^\s*)<\?python(?!.*\?>)'
        end: '\?>(?:\s*$\n)?'
        name: source.python.embedded.html
        patterns:
            -
                include: source.python
    smarty:
        patterns:
            -
                begin: '(\{(literal)\})'
                captures:
                    '1': {name: source.smarty.embedded.html}
                    '2': {name: support.function.built-in.smarty}
                end: '(\{/(literal)\})'
            -
                begin: '{{|{'
                disabled: 1
                end: '}}|}'
                name: source.smarty.embedded.html
                patterns:
                    - {include: source.smarty}
    string-double-quoted:
        begin: '"'
        beginCaptures:
            '0': { name: punctuation.definition.string.begin.html }
        end: '"'
        endCaptures:
            '0': { name: punctuation.definition.string.end.html }
        name: string.quoted.double.html
        patterns:
            -
                include: '#entities'
    string-single-quoted:
        begin: ''''
        beginCaptures:
            '0': { name: punctuation.definition.string.begin.html }
        end: ''''
        endCaptures:
            '0': { name: punctuation.definition.string.end.html }
        name: string.quoted.single.html
        patterns:
            -
                include: '#entities'
    tag-sciter-class-attribute:
        match: '\.([a-zA-Z0-9:-]+)'
        name: entity.name.selector
    tag-sciter-id-attribute:
        match: '\#([a-zA-Z0-9:-]+)'
        name: entity.name.selector
    tag-generic-attribute:
        match: '(?<=[^=])\b([a-zA-Z0-9:-]+)'
        name: entity.other.attribute-name.html
    tag-id-attribute:
        begin: '\b(id)\b\s*(=)'
        captures:
            '1': { name: entity.other.attribute-name.id.html }
            '2': { name: punctuation.separator.key-value.html }
        end: '(?!\G)(?<=''|"|[^\s<>/])'
        name: meta.attribute-with-value.id.html
        patterns:
            -
                begin: '"'
                beginCaptures:
                    '0': {name: punctuation.definition.string.begin.html}
                contentName: meta.toc-list.id.html
                end: '"'
                endCaptures:
                    '0': {name: punctuation.definition.string.end.html}
                name: string.quoted.double.html
                patterns:
                    - {include: '#entities'}
            -
                begin: ''''
                beginCaptures:
                    '0': {name: punctuation.definition.string.begin.html}
                contentName: meta.toc-list.id.html
                end: ''''
                endCaptures:
                    '0': {name: punctuation.definition.string.end.html}
                name: string.quoted.single.html
                patterns:
                    - {include: '#entities'}
            -
                captures:
                    '0': {name: meta.toc-list.id.html}
                match: '(?<==)(?:[^\s<>/''"]|/(?!>))+'
                name: string.unquoted.html
    tag-stuff:
        patterns:
            -
                include: '#tag-sciter-id-attribute'
            -
                include: '#tag-sciter-class-attribute'
            -
                include: '#tag-id-attribute'
            -
                include: '#tag-generic-attribute'
            -
                include: '#string-double-quoted'
            -
                include: '#string-single-quoted'
            -
                include: '#unquoted-attribute'
    unquoted-attribute:
        match: '(?<==)(?:[^\s<>/''"]|/(?!>))+'
        name: string.unquoted.html
